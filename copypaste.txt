from flask import Flask, jsonify, request
from redis import Redis
from rq import Queue
import uuid
import time

app = Flask(__name__)

# Redis setup
redis_conn = Redis(host="localhost", port=6379, decode_responses=True)

# Task queue
task_queue = Queue("tasks", connection=redis_conn)

# In-memory storage for workers and tasks
workers = {}  # worker_id -> {"status": "idle" or "busy", "last_seen": timestamp}
tasks = {}  # task_id -> {"file_name": str, "status": str, "worker": str, "result": dict}

@app.route("/register", methods=["POST"])
def register_worker():
    """Register a new worker node."""
    worker_id = request.json.get("worker_id")
    if not worker_id:
        return jsonify({"error": "worker_id is required"}), 400

    workers[worker_id] = {"status": "idle", "last_seen": time.time()}
    return jsonify({"message": f"Worker {worker_id} registered successfully"}), 200

@app.route("/submit", methods=["POST"])
def submit_task():
    """Submit a new task."""
    data = request.json
    file_name = data.get("file_name")
    file_content = data.get("file_content")

    if not file_name or not file_content:
        return jsonify({"error": "file_name and file_content are required"}), 400

    # Create a new task
    task_id = str(uuid.uuid4())
    tasks[task_id] = {
        "file_name": file_name,
        "status": "queued",
        "worker": None,
        "result": None,
    }

    # Distribute the task to the first available worker
    assigned_worker = None
    for worker_id, worker_info in workers.items():
        if worker_info["status"] == "idle":
            # Send task to this worker
            try:
                response = requests.post(
                    f"http://{worker_id}:5000/process",
                    json={"task_id": task_id, "file_content": file_content},
                )
                if response.status_code == 200:
                    workers[worker_id]["status"] = "busy"
                    workers[worker_id]["last_seen"] = time.time()
                    tasks[task_id]["worker"] = worker_id
                    tasks[task_id]["status"] = "processing"
                    assigned_worker = worker_id
                    break
            except Exception as e:
                print(f"Failed to send task to worker {worker_id}: {e}")

    if not assigned_worker:
        return jsonify({"message": "No available workers, task queued"}), 202

    return jsonify({
        "message": f"Task {task_id} assigned to worker {assigned_worker}",
        "task_id": task_id
    }), 201

@app.route("/update", methods=["POST"])
def update_task():
    """Update task status from a worker node."""
    data = request.json
    task_id = data.get("task_id")
    worker_id = data.get("worker_id")
    status = data.get("status")
    result = data.get("result")

    if not task_id or not worker_id or not status:
        return jsonify({"error": "task_id, worker_id, and status are required"}), 400

    if task_id in tasks:
        tasks[task_id]["status"] = status
        tasks[task_id]["result"] = result
        workers[worker_id]["status"] = "idle"  # Mark worker as idle again
        workers[worker_id]["last_seen"] = time.time()
        return jsonify({"message": f"Task {task_id} updated successfully"}), 200

    return jsonify({"error": "Task not found"}), 404

@app.route("/nodes", methods=["GET"])
def list_workers():
    """List all registered workers and their statuses."""
    return jsonify(workers)

@app.route("/status", methods=["GET"])
def list_tasks():
    """List the status of all tasks."""
    return jsonify(tasks)

if __name__ == "__main__":
    print("Starting orchestrator server...")
    app.run(host="0.0.0.0", port=5000)