from flask import Flask, request, jsonify
import os
import ast
import re
from pathlib import Path

app = Flask(__name__)


def extract_requirements(file_content):
    """
    Analyze a Python file's imports and generate a list of requirements.
    """
    tree = ast.parse(file_content)
    requirements = set()

    for node in tree.body:
        # Handle standard imports (e.g., "import numpy")
        if isinstance(node, ast.Import):
            for alias in node.names:
                requirements.add(alias.name.split(".")[0])

        # Handle "from x import y" style imports
        elif isinstance(node, ast.ImportFrom):
            if node.module:
                requirements.add(node.module.split(".")[0])

    return sorted(requirements)


@app.route('/analyze', methods=['POST'])
def analyze_python_file():
    """
    API endpoint to analyze a Python file and generate a requirements.txt.
    """
    if 'file' not in request.files:
        return jsonify({"error": "No file part in the request"}), 400

    file = request.files['file']
    if file.filename == '':
        return jsonify({"error": "No selected file"}), 400

    # Ensure the uploaded file is a Python file
    if not file.filename.endswith('.py'):
        return jsonify({"error": "Only .py files are allowed"}), 400

    try:
        # Read the file content
        file_content = file.read().decode('utf-8')
        
        # Extract requirements
        requirements = extract_requirements(file_content)

        # Generate requirements.txt
        requirements_file_path = Path("requirements.txt")
        with open(requirements_file_path, "w") as f:
            f.write("\n".join(requirements))

        return jsonify({
            "message": "requirements.txt generated successfully.",
            "requirements": requirements
        }), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    app.run(debug=True, port=5000)