(* Merge function: merges two sorted lists into one sorted list *)
let rec merge sorted_list1 sorted_list2 = 
  match sorted_list1, sorted_list2 with
  | [], remaining -> 
      Printf.printf "Merging: [] and [%s] → [%s]\n"
        (String.concat "; " (List.map string_of_int remaining))
        (String.concat "; " (List.map string_of_int remaining));
      remaining
  | remaining, [] -> 
      Printf.printf "Merging: [%s] and [] → [%s]\n"
        (String.concat "; " (List.map string_of_int remaining))
        (String.concat "; " (List.map string_of_int remaining));
      remaining
  | first1 :: rest1, first2 :: rest2 -> 
      if first1 < first2 then (
        Printf.printf "Merging: %d < %d → %d added first\n" first1 first2 first1;
        first1 :: merge rest1 (first2 :: rest2)
      )
      else (
        Printf.printf "Merging: %d >= %d → %d added first\n" first1 first2 first2;
        first2 :: merge (first1 :: rest1) rest2
      )

(* Function to split a list into two halves *)
let rec split_list input_list left_half right_half = 
  match input_list with
  | [] -> 
      Printf.printf "Splitting done: Left = [%s], Right = [%s]\n"
        (String.concat "; " (List.map string_of_int left_half))
        (String.concat "; " (List.map string_of_int right_half));
      (left_half, right_half)
  | [single_element] -> 
      Printf.printf "Splitting: Adding last element %d to Left\n" single_element;
      (single_element :: left_half, right_half)
  | first :: second :: remaining -> 
      Printf.printf "Splitting: Moving %d to Left, %d to Right\n" first second;
      split_list remaining (first :: left_half) (second :: right_half)

(* Merge Sort function *)
let rec merge_sort input_list = 
  match input_list with
  | [] -> 
      Printf.printf "Base case: empty list → return []\n";
      []
  | [single_element] -> 
      Printf.printf "Base case: single element [%d] → return [%d]\n" single_element single_element;
      [single_element]
  | _ -> 
      Printf.printf "\nSorting list: [%s]\n"
        (String.concat "; " (List.map string_of_int input_list));

      let (left_half, right_half) = split_list input_list [] [] in
      
      let sorted_left = merge_sort left_half in
      let sorted_right = merge_sort right_half in

      Printf.printf "Merging sorted halves: [%s] and [%s]\n"
        (String.concat "; " (List.map string_of_int sorted_left))
        (String.concat "; " (List.map string_of_int sorted_right));

      merge sorted_left sorted_right

(* Test the merge_sort function *)
let () =
  let test_list = [4; 3; 1; 5; 2] in
  Printf.printf "\nOriginal List: [%s]\n"
    (String.concat "; " (List.map string_of_int test_list));

  let sorted_list = merge_sort test_list in
  Printf.printf "\nSorted List: [%s]\n"
    (String.concat "; " (List.map string_of_int sorted_list))