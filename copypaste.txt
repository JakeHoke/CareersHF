from flask import Flask, jsonify, request, render_template
import subprocess
import tempfile
import os
import requests
import json

# Load configuration from JSON file
with open("config.json", "r") as config_file:
    config = json.load(config_file)

# Assign variables from config
WORKER_ID = config["worker_id"]
ORCHESTRATOR_URL = config["orchestrator_url"]
PORT = config["port"]

app = Flask(__name__)
worker_status = "idle"

# Register the worker with the orchestrator immediately on script start
try:
    response = requests.post(f"{ORCHESTRATOR_URL}/register", json={"worker_id": WORKER_ID})
    if response.status_code == 200:
        print(f"Worker {WORKER_ID} registered successfully.")
    else:
        print(f"Failed to register worker {WORKER_ID}: {response.json()}")
except Exception as e:
    print(f"Error registering worker: {e}")

@app.route("/")
def index():
    """Render the HTML file upload form."""
    return render_template("upload.html")

@app.route("/status", methods=["GET"])
def status():
    """Return the current status of the worker."""
    return jsonify({"worker_id": WORKER_ID, "status": worker_status})

@app.route("/process", methods=["POST"])
def process_task():
    """Process a task sent by the orchestrator."""
    global worker_status

    data = request.json
    task_id = data.get("task_id")
    file_content = data.get("file_content")

    if not task_id or not file_content:
        return jsonify({"status": "failure", "error": "Missing task_id or file_content"}), 400

    print(f"Received task {task_id}...")
    worker_status = "working"

    # Notify orchestrator that the task has been received and is being worked on
    try:
        requests.post(
            f"{ORCHESTRATOR_URL}/update",
            json={
                "task_id": task_id,
                "worker_id": WORKER_ID,
                "status": "working",  # Notify that the task is being worked on
                "result": None,  # No result yet, as it's just acknowledgment
            },
        )
    except Exception as e:
        print(f"Error sending acknowledgment to orchestrator: {e}")

    # Save and execute the file
    with tempfile.NamedTemporaryFile(delete=False, suffix=".py") as temp_file:
        temp_file.write(file_content.encode())
        temp_filepath = temp_file.name

    try:
        result = subprocess.run(
            ["python3", temp_filepath],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            timeout=10
        )
        output = result.stdout.decode()
        errors = result.stderr.decode()
        status = "success" if not errors else "failure"
    except subprocess.TimeoutExpired:
        output = ""
        errors = "Execution timed out."
        status = "failure"
    except Exception as e:
        output = ""
        errors = str(e)
        status = "failure"
    finally:
        os.remove(temp_filepath)

    # Notify orchestrator of the task result
    try:
        requests.post(
            f"{ORCHESTRATOR_URL}/update",
            json={
                "task_id": task_id,
                "worker_id": WORKER_ID,
                "status": status,  # Final task status: success or failure
                "result": {"output": output, "errors": errors},
            },
        )
    except Exception as e:
        print(f"Error updating orchestrator with task result: {e}")

    worker_status = "idle"
    return jsonify({"status": status, "output": output, "errors": errors})

if __name__ == "__main__":
    print("Starting Flask server...")
    app.run(host="0.0.0.0", port=PORT)